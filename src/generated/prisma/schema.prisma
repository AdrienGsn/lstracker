model Session {
  id                   String  @id @default(cuid())
  userId               String
  token                String  @unique
  ipAddress            String?
  userAgent            String?
  activeOrganizationId String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?

  user User @relation(fields: [userId], references: [id])
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  idToken               String?
  password              String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Verification {
  id         String @id @default(cuid())
  identifier String
  value      String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?
}

model User {
  id            String  @id @default(cuid())
  name          String  @unique
  email         String  @unique
  emailVerified Boolean @default(false)
  image         String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions   Session[]
  accounts   Account[]
  bugReports BugReport[]

  @@unique([name, email])
}

generator client {
  provider        = "prisma-client-js"
  output          = "../../src/generated/prisma"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model BugReport {
  id      String  @id @default(cuid())
  userId  String?
  message String

  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
}

model Marker {
  id    String  @id @default(cuid())
  lat   Float
  lng   Float
  label String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
